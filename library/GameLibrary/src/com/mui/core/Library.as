package com.mui.core{		import com.gengine.debug.Log;	import com.gengine.debug.ThrowError;	import com.gengine.global.Global;	import com.mui.events.LibraryEvent;		import flash.display.Bitmap;	import flash.display.BitmapData;	import flash.display.Sprite;	import flash.events.ErrorEvent;	import flash.events.Event;	import flash.events.EventDispatcher;	import flash.events.IOErrorEvent;	import flash.events.ProgressEvent;	import flash.events.SecurityErrorEvent;	import flash.net.URLRequest;	import flash.system.ApplicationDomain;	import flash.system.LoaderContext;	import flash.utils.ByteArray;	import flash.utils.Dictionary;	import flash.utils.describeType;
	[Event(name="progress", type="flash.events.ProgressEvent")]	[Event(name="embedComplete", type="com.mui.events.LibraryEvent")]	[Event(name="loadComplete", type="com.mui.events.LibraryEvent")]	[Event(name="error",type="flash.events.ErrorEvent")]		public class Library extends EventDispatcher	{				private var _loaderContext:LoaderContext;				private var _enterFrameDispatcher		: Sprite;				private var _embeddedLoaders			: Array;		private var _runtimeLoaders				: Array;				private var _embeddedComplete			: Boolean;		private var _runtimeCompletes			: Array;		private var _runtimeComplete			: Boolean;				private var _name						: String;				private var _bytesLoaded				: Number = 0;		private var _bytesTotal					: Number = 0;				private var _LoaderContext:LoaderContext = new LoaderContext()					private var _dicUrlName:Dictionary = new Dictionary();				private var _this:Library;				public function Library( name:String )        {        	super();					_this = this;			_name = name;			initialize();			_loaderContext = new LoaderContext(false,new ApplicationDomain(null));        }				public function get name():String		{			return _name;		}				public function get bytesLoaded():Number		{			return _bytesLoaded;		}				public function get bytesTotal():Number		{			return _bytesTotal;		}				public function get complete():Boolean		{			return _embeddedComplete && _runtimeComplete;		}				public function get embeddedComplete():Boolean		{			return _embeddedComplete;		}				public function get runtimeComplete():Boolean		{			return _runtimeComplete;		}				public function loadSWF( url:String,resName:String = ""):void		{			var loader:LibraryLoader = new LibraryLoader();			_dicUrlName[url] = resName;			loader.contentLoaderInfo.addEventListener( ProgressEvent.PROGRESS, onLoaderProgress, false, 0, true );			loader.contentLoaderInfo.addEventListener( Event.COMPLETE, onLoaderComplete, false, 0, true );			loader.contentLoaderInfo.addEventListener(IOErrorEvent.IO_ERROR,onIOErrorHandler,false, 0, true);			loader.contentLoaderInfo.addEventListener(SecurityErrorEvent.SECURITY_ERROR,onIOErrorHandler,false, 0, true);			loader.load( new URLRequest( url ),_loaderContext );			_runtimeLoaders.push( loader );			_runtimeCompletes.push( false );		}				public function embedSWF( ClassName:Class ):void		{			var loader:LibraryLoader = new LibraryLoader();			loader.loadBytes( new ClassName() as ByteArray ,_loaderContext);						_embeddedLoaders.push( loader );		}				public function loadSWFS( urls:Array ):void		{			_runtimeComplete = false;						var num:int = urls.length;			for( var i:int = 0; i < num; i++ )			{				loadSWF( urls[ i ] as String );			}		}				public function embedSWFS( classes:Array ):void		{			if( _enterFrameDispatcher.hasEventListener( Event.ENTER_FRAME ) ) _enterFrameDispatcher.removeEventListener( Event.ENTER_FRAME, onEnterFrame );						_embeddedComplete = false;						var loader:LibraryLoader;			var SWF:Class;			var num:Number = classes.length;			for( var i:int = 0; i < num; i++ )			{				SWF = Class( classes[ i ] );				loader = new LibraryLoader();				loader.loadBytes( new SWF() as ByteArray ,_loaderContext);								_embeddedLoaders.push( loader );			}						_enterFrameDispatcher.addEventListener( Event.ENTER_FRAME, onEnterFrame, false, 0, true );		}				/**		 * 是否有定义一个类 		 * @param className		 * @return 		 * 		 */				public function hasDefinition( className:String ):Boolean		{			return _loaderContext.applicationDomain.hasDefinition(className);		}				public function getDefinition( className:String ):Class		{			var cls:Class =  _loaderContext.applicationDomain.getDefinition(className) as Class;			if( cls )			{				return cls;			}//			var loader:LibraryLoader;//			var numLoaders:int;//			var i:int;//			//			numLoaders = _embeddedLoaders.length;//			for( i = 0; i < numLoaders; i++ )//			{//				loader = LibraryLoader( _embeddedLoaders[ i ] );//				if( loader.contentLoaderInfo.applicationDomain.hasDefinition( className ) )//				{//					return loader.contentLoaderInfo.applicationDomain.getDefinition( className ) as Class;//				}//			}////			numLoaders = _runtimeLoaders.length;//			for( i = 0; i < numLoaders; i++ )//			{//				//				loader = LibraryLoader( _runtimeLoaders[ i ] );//				if( loader.contentLoaderInfo.applicationDomain.hasDefinition( className ) )//				{//					return loader.contentLoaderInfo.applicationDomain.getDefinition( className ) as Class;//				}//			}			ThrowError.show( "ReferenceError: Error #1065: Variable " + className + " is not defined." );			return null;			//throw new ReferenceError( "ReferenceError: Error #1065: Variable " + className + " is not defined." );		}				public function contains( className:String ):Boolean		{			var loader:LibraryLoader;			var numLoaders:Number = _embeddedLoaders.length;			for( var i:int = 0; i < numLoaders; i++ )			{				loader = LibraryLoader( _embeddedLoaders[ i ] );				if( loader.contentLoaderInfo.applicationDomain.hasDefinition( className ) )				{					return true;				}			}						return false;		}				public function reset():void		{			destroy();			initialize();		}				public function destroy():void		{			if( _enterFrameDispatcher.hasEventListener( Event.ENTER_FRAME ) ) _enterFrameDispatcher.removeEventListener( Event.ENTER_FRAME, onEnterFrame );						var loader:LibraryLoader;			var numLoaders:int			var i:int;						numLoaders = _runtimeLoaders.length;			for( i = 0; i < numLoaders; i++ )			{				loader = LibraryLoader( _runtimeLoaders[ i ] );				if( !_runtimeCompletes[ i ] )				{					loader.contentLoaderInfo.removeEventListener( ProgressEvent.PROGRESS, onLoaderProgress );//					loader.contentLoaderInfo.removeEventListener( Event.COMPLETE, onLoaderComplete );					loader.close();				}				else				{					loader.unload();				}			}						numLoaders = _embeddedLoaders.length;			for( i = 0; i < numLoaders; i++ )			{				loader = LibraryLoader( _embeddedLoaders[ i ] );				loader.unload();			}						_embeddedLoaders 		= null;			_runtimeLoaders 		= null;			_runtimeCompletes 		= null;						_enterFrameDispatcher 	= null;						_name					= null;					_bytesLoaded			= undefined;			_bytesTotal				= undefined;		}				private function initialize():void		{			_embeddedLoaders = new Array();			_runtimeLoaders = new Array();			_runtimeCompletes = new Array();						_enterFrameDispatcher = new Sprite();						_bytesLoaded = 0;			_bytesTotal = 0;		}				private function onEnterFrame( event:Event ):void		{			_enterFrameDispatcher.removeEventListener( Event.ENTER_FRAME, onEnterFrame );						_embeddedComplete = true;						dispatchEvent( new LibraryEvent( LibraryEvent.EMBED_COMPLETE,null, false, false ) );		}				private function onLoaderProgress( event:ProgressEvent ):void		{			checkLoadersProgress();		}				private function onLoaderComplete( event:Event ):void		{			var loader:LibraryLoader = LibraryLoader( event.target.loader );//			loader.contentLoaderInfo.removeEventListener( ProgressEvent.PROGRESS, onLoaderProgress );//			loader.contentLoaderInfo.removeEventListener( Event.COMPLETE, onLoaderComplete );			removeLoaderEvent(loader);						var resName:String = _dicUrlName[loader.getUrl()];			dispatchEvent( new LibraryEvent( LibraryEvent.SINGLELOAD_COMPLETE,resName, false, false ) );						var numLoaders:int = _runtimeLoaders.length;			for( var i:int = 0; i < numLoaders; i++ )			{				if( loader == LibraryLoader( _runtimeLoaders[ i ] ) )				{					_runtimeCompletes[ i ] = true;					break;				}			}						checkLoadersProgress( true );		}				private function onIOErrorHandler( event:ErrorEvent ):void		{			Log.system( "library:"+event.text );			if(Global.isDebugModle)			{				dispatchEvent(new ErrorEvent( ErrorEvent.ERROR,false,false,event.text ));			}			if(event.target.loader is LibraryLoader)			{				removeLoaderEvent(event.target.loader as LibraryLoader);			}		}				private function removeLoaderEvent(loader:LibraryLoader):void		{			loader.contentLoaderInfo.removeEventListener( ProgressEvent.PROGRESS, onLoaderProgress, false );			loader.contentLoaderInfo.removeEventListener( Event.COMPLETE, onLoaderComplete, false );			loader.contentLoaderInfo.removeEventListener(IOErrorEvent.IO_ERROR,onIOErrorHandler,false);			loader.contentLoaderInfo.removeEventListener(SecurityErrorEvent.SECURITY_ERROR,onIOErrorHandler,false);		}				private function checkLoadersProgress( complete:Boolean = false ):void		{			var bytesTotal:Number = 0;			var bytesLoaded:Number = 0;			var loader:LibraryLoader;			var complete:Boolean = true;			var numLoaders:int = _runtimeLoaders.length;			for( var i:int = 0; i < numLoaders; i++ )			{				loader = LibraryLoader( _runtimeLoaders[ i ] );				bytesTotal += loader.contentLoaderInfo.bytesTotal;				bytesLoaded += loader.contentLoaderInfo.bytesLoaded;								if( !_runtimeCompletes[ i ] ) complete = false;			}							_bytesLoaded = bytesLoaded;			_bytesTotal = bytesTotal;						if( complete )			{				_runtimeComplete = true;				dispatchEvent( new LibraryEvent( LibraryEvent.LOAD_COMPLETE,null, false, false ) );			}			else			{				dispatchEvent( new ProgressEvent( ProgressEvent.PROGRESS, false, false, bytesLoaded, bytesTotal ) );			}		}	}}